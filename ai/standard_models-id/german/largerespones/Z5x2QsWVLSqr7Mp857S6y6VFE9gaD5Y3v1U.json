[{"type":"user","text":"```# --- Configuration ---\n$filePath = \u0022C:/Users/uczen.101-04/Desktop/ULTRAKILL.v2025.02.24.zip\u0022\n$repoUrl = \u0022https://api.github.com/repos/DrMineword/botghost/contents/repofiles/html/file/index\u0022 # Updated URL\n$githubToken = $env:GITHUB_PAT # Read PAT from environment variable\n$chunkSize = 1024 * 1024 * 1 # 1MB chunk size - adjust as needed. GitHub API generally limits to 100MB per file.\n$fileName = \u0022index\u0022 # File name on GitHub\n\n# --- Functions ---\nfunction Get-GitHubUploadUrl {\n    param(\n        [string]$repoUrl,\n        [string]$fileName,\n        [string]$message = \u0022Upload chunk\u0022\n    )\n    $headers = @{\n        Authorization = \u0022token $($githubToken)\u0022\n    }\n    $response = Invoke-RestMethod -Uri $repoUrl -Method Get -Headers $headers\n    $response.upload_url\n}\n\n\nfunction Upload-GitHubFile {\n    param(\n        [string]$uploadUrl,\n        [byte[]]$fileContent,\n        [string]$fileName\n    )\n    $headers = @{\n        Authorization = \u0022token $($githubToken)\u0022\n        \u0022Content-Type\u0022 = \u0022application/octet-stream\u0022\n    }\n    $response = Invoke-RestMethod -Uri $uploadUrl -Method Put -Headers $headers -Body $fileContent -ContentType \u0022application/octet-stream\u0022\n    if ($response.sha) {\n        Write-Host \u0022Plik \u0027$fileName\u0027 przesłany pomyślnie.\u0022\n        return $response.content.download_url # Return download URL\n    } else {\n        Write-Error \u0022Błąd podczas przesyłania pliku \u0027$fileName\u0027: $($response.message)\u0022\n        return $null\n    }\n}\n\n\n# --- Main Script ---\n\n# Error Handling for file existence.\nif (!(Test-Path $filePath)) {\n    Write-Error \u0022Plik nie został znaleziony: $filePath\u0022\n    exit 1\n}\n\ntry {\n    $reader = [System.IO.FileStream]::new($filePath, \u0022Open\u0022, \u0022Read\u0022)\n    $totalFileSize = $reader.Length\n    $uploadedFileUrls = @() # Array to store uploaded file URLs\n    $chunkNumber = 1\n\n    while (-not $reader.EndOfStream) {\n        $buffer = New-Object byte[] $chunkSize\n        $bytesRead = $reader.Read($buffer, 0, $chunkSize)\n        if ($bytesRead -gt 0) {\n            $uploadUrl = Get-GitHubUploadUrl -repoUrl $repoUrl -fileName \u0022$fileName-$chunkNumber\u0022\n            $downloadUrl = Upload-GitHubFile -uploadUrl $uploadUrl -fileContent $buffer -fileName \u0022$fileName-$chunkNumber\u0022\n            if ($downloadUrl) {\n                $uploadedFileUrls += $downloadUrl\n            }\n            $chunkNumber++\n        }\n    }\n\n    $reader.Close()\n    Write-Host \u0022Adresy URL przesłanych plików:\u0022\n    $uploadedFileUrls | ForEach-Object { Write-Host $_ }\n\n}\ncatch {\n    Write-Error \u0022Wystąpił błąd podczas przetwarzania pliku: $($_.Exception.Message)\u0022\n    exit 1\n}```\n\n return a lot of error and closed, fix it pls"},{"type":"ai-model","text":{"candidates":[{"content":{"parts":[{"text":"The script has several issues that prevent it from working correctly.  The primary problem is that it attempts to upload the file in chunks to a URL that expects a single file upload, not chunked uploads.  GitHub\u0027s API for creating a file requires a single PUT request with the entire file content.  The script\u0027s approach of getting a URL for each chunk and uploading it separately is not compatible with this API.\n\nHere\u0027s a corrected version that uploads the entire file in a single request, handles potential errors more robustly, and provides better feedback:\n\n```powershell\n# --- Configuration ---\n$filePath = \u0022C:/Users/uczen.101-04/Desktop/ULTRAKILL.v2025.02.24.zip\u0022\n$repoUrl = \u0022https://api.github.com/repos/DrMineword/botghost/contents/repofiles/html/file/index\u0022\n$githubToken = $env:GITHUB_PAT\n$fileName = \u0022ULTRAKILL.v2025.02.24.zip\u0022 # Use the actual filename\n\n# --- Functions ---\nfunction Get-GitHubRepoContent {\n    param(\n        [string]$repoUrl,\n        [string]$fileName,\n        [string]$message = \u0022Upload file\u0022\n    )\n    $headers = @{\n        Authorization = \u0022token $($githubToken)\u0022\n        Accept = \u0022application/vnd.github+json\u0022\n    }\n    try {\n        $response = Invoke-RestMethod -Uri $repoUrl -Method Get -Headers $headers\n        return $response\n    }\n    catch {\n        Write-Error \u0022Błąd pobrania informacji o repozytorium: $($_.Exception.Message)\u0022\n        return $null\n    }\n}\n\nfunction Upload-GitHubFile {\n    param(\n        [string]$repoUrl,\n        [byte[]]$fileContent,\n        [string]$fileName,\n        [string]$message = \u0022Upload file\u0022\n    )\n    $headers = @{\n        Authorization = \u0022token $($githubToken)\u0022\n        \u0022Content-Type\u0022 = \u0022application/octet-stream\u0022\n        Accept = \u0022application/vnd.github+json\u0022\n    }\n    $data = @{\n        message = $message\n        content = [System.Convert]::ToBase64String($fileContent)\n    }\n\n    try {\n        $response = Invoke-RestMethod -Uri $repoUrl -Method Put -Headers $headers -Body (ConvertTo-Json $data)\n        if ($response.content.download_url) {\n            Write-Host \u0022Plik \u0027$fileName\u0027 przesłany pomyślnie. URL do pobrania: $($response.content.download_url)\u0022\n            return $response.content.download_url\n        } else {\n            Write-Error \u0022Błąd podczas przesyłania pliku \u0027$fileName\u0027: $($response.message)\u0022\n            return $null\n        }\n    }\n    catch {\n        Write-Error \u0022Błąd podczas przesyłania pliku \u0027$fileName\u0027: $($_.Exception.Message)\u0022\n        return $null\n    }\n}\n\n# --- Main Script ---\n\n# Error Handling for file existence.\nif (!(Test-Path $filePath)) {\n    Write-Error \u0022Plik nie został znaleziony: $filePath\u0022\n    exit 1\n}\n\ntry {\n    $fileContent = [System.IO.File]::ReadAllBytes($filePath)\n    $repoInfo = Get-GitHubRepoContent -repoUrl $repoUrl -fileName $fileName\n    if ($repoInfo) {\n        $uploadUrl = $repoInfo.url # Use the existing file\u0027s URL\n        Upload-GitHubFile -repoUrl $uploadUrl -fileContent $fileContent -fileName $fileName\n    } else {\n        Write-Error \u0022Nie udało się pobrać informacji o pliku z repozytorium.\u0022\n    }\n}\ncatch {\n    Write-Error \u0022Wystąpił błąd podczas przetwarzania pliku: $($_.Exception.Message)\u0022\n    exit 1\n}\n```\n\n**Key Changes:**\n\n* **Single Upload:** The script now reads the entire file into memory (`ReadAllBytes`) and uploads it in one go.  This is necessary for the GitHub API.  For extremely large files, consider using a streaming approach, but that\u0027s significantly more complex.\n* **Error Handling:** Improved error handling with more specific error messages.\n* **`Accept` Header:** Added `Accept: application/vnd.github+json` header to ensure the API returns JSON responses.\n* **Base64 Encoding:** The file content is encoded to Base64 before sending it to the GitHub API, as required.\n* **Using Existing File URL:** The script now checks if the file already exists on GitHub and uses its URL for updating (PUT request). This prevents creating multiple files.\n* **Clearer Filename:** Uses the actual filename for consistency.\n\n**Before running:**\n\n1. **GitHub Personal Access Token (PAT):** Make sure you have a GitHub PAT with the necessary permissions (repo access) and set it as the `GITHUB_PAT` environment variable.  **Do not hardcode your PAT in the script.**\n2. **File Path:** Double-check the `$filePath` to ensure it\u0027s correct.\n3. **API Rate Limits:** Be aware of GitHub API rate limits.  If you\u0027re uploading very large files or making many requests, you might hit these limits.\n\n\nThis revised script should correctly upload your file to the specified GitHub repository.  Remember to handle potential exceptions appropriately, especially for large files or network issues.\n"}],"role":"model"},"finishReason":"STOP","safetyRatings":[{"category":"HARM_CATEGORY_HATE_SPEECH","probability":"NEGLIGIBLE"},{"category":"HARM_CATEGORY_DANGEROUS_CONTENT","probability":"NEGLIGIBLE"},{"category":"HARM_CATEGORY_HARASSMENT","probability":"NEGLIGIBLE"},{"category":"HARM_CATEGORY_SEXUALLY_EXPLICIT","probability":"NEGLIGIBLE"}],"avgLogprobs":-0.12273824156211514}],"usageMetadata":{"promptTokenCount":809,"candidatesTokenCount":1218,"totalTokenCount":2027,"promptTokensDetails":[{"modality":"TEXT","tokenCount":809}],"candidatesTokensDetails":[{"modality":"TEXT","tokenCount":1218}]},"modelVersion":"gemini-1.5-flash"}},{"type":"metadata","iso-req":"2025-03-28 13:56:22","lng":4638,"id":"Z5x2QsWVLSqr7Mp857S6y6VFE9gaD5Y3v1U"}]